package hexlet.code;

import java.util.ArrayList;

public final class StringSchema extends BaseSchema {
    private String value;
    private int minLength;
    private boolean defaultSwitch = true;

    public StringSchema() {
        super.predicateList = new ArrayList<>();
        super.predicateList.add(x -> isValidDefault());
    }

    private boolean isValidDefault() {
        if (defaultSwitch) {
            return super.stringIsValid == null || super.stringIsValid.equals("")
                    || super.stringIsValid instanceof String;
        }
        return true;
    }

    public StringSchema required() {
        defaultSwitch = false;
        super.predicateList.add(x -> super.stringIsValid instanceof String
                && super.stringIsValid.toString().length() > 0);
        return this;
    }

    public StringSchema contains(Object inputValue) {
        this.value = inputValue.toString();
        if (!(super.stringIsValid instanceof String)) {
            super.predicateList.add(x -> super.stringIsValid instanceof String);
            return this;
        }
        super.predicateList.add(x -> super.stringIsValid.toString().contains(this.value));
        return this;
    }

    public StringSchema minLength(int inputMinLength) {
        this.minLength = Math.max(inputMinLength, 0);
        if (!(super.stringIsValid instanceof String)) {
            super.predicateList.add(x -> super.stringIsValid instanceof String);
            return this;
        }
        super.predicateList.add(x -> super.stringIsValid.toString().length() >= this.minLength);
        return this;
    }
}
